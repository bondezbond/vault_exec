EXPIRATION_FILE=~/.aws/vault_aws_creds_expiration
CREDENTIALS_FILE=~/.aws/vault_aws_creds
VAULT_CREDENTIALS_PATH_DEFAULT=aws/creds/developer

if [ "" == "$VAULT_CREDENTIALS_PATH" ]; then
  echo "You did not specify a VAULT_CREDENTIALS_PATH, using the default $VAULT_CREDENTIALS_PATH_DEFAULT"
  VAULT_CREDENTIALS_PATH=$VAULT_CREDENTIALS_PATH_DEFAULT
fi

if [ "$DEBUG_VAULT_EXEC" = "true" ]; then
  echo "VAULT_CREDENTIALS_PATH=$VAULT_CREDENTIALS_PATH"
fi

readField() {
  field=$1
  cat $CREDENTIALS_FILE | grep $field | sed -E "s/.*\"$field\": \"?([^\",]*)\"?.*/\1/g"
}

resetCredentials() {
    vault read -format=json $VAULT_CREDENTIALS_PATH > $CREDENTIALS_FILE
    if [ "0" -ne "$?" ]; then
        echo "Failed to get new credentials from vault!  Quitting."
        rm $CREDENTIALS_FILE
        exit 1
    fi
    chmod 600 $CREDENTIALS_FILE
    duration=$(readField 'lease_duration')
    currentTime=`date +"%s"`
    expiration=`expr $currentTime + $duration`
    echo $expiration > $EXPIRATION_FILE
    chmod 600 $EXPIRATION_FILE
}

calculateTimeLeft() {
    expirationTime=`cat $EXPIRATION_FILE`
    if [ "" = "$expirationTime" ]; then
      expirationTime=0
    fi
    currentTime=`date +"%s"`
    timeLeft=`expr $expirationTime - $currentTime`
    echo $timeLeft
}

if [ ! -f $CREDENTIALS_FILE ]; then
    echo "Vault credentials file not found ($CREDENTIALS_FILE) - creating new credentials."
    resetCredentials
fi

if [ ! -f $EXPIRATION_FILE ]; then
    echo "Vault credentials expiration file not found ($EXPIRATION_FILE) - creating new credentials."
    resetCredentials
fi

timeLeft=$(calculateTimeLeft)
if [ "0" -gt "$timeLeft" ]; then
    echo "Vault credentials have expired or are not valid - creating new credentials."
    resetCredentials
else
    echo "Vault credentials will remain valid for: $timeLeft seconds"
fi

export AWS_ACCESS_KEY_ID=$(readField 'access_key')
export AWS_SECRET_ACCESS_KEY=$(readField 'secret_key')
export AWS_SESSION_TOKEN=$(readField 'security_token')

if [ "$DEBUG_VAULT_EXEC" = "true" ]
then
    echo AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
    echo AWS_SECRET_ACCES_KEY=$AWS_SECRET_ACCESS_KEY
    echo AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN
fi

eval $@
